# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SaveAttributes
                                 A QGIS plugin
 SaveAttributes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-31
        git sha              : $Format:%H$
        copyright            : (C) 2019 by rui
        email                : ucesrji@ucl.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                            e       *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QFileInfo, QVariant
from PyQt5.QtGui import QIcon, QColor
from PyQt5.QtWidgets import QAction, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from qgis.core import QgsProject, Qgis, QgsVectorLayer, QgsDataSourceUri, QgsVectorFileWriter
from qgis.core import QgsWkbTypes, QgsPrintLayout, QgsLayoutItemMap, QgsMapSettings, QgsField
from qgis.core import QgsRectangle, QgsLayoutPoint, QgsLayoutSize, QgsUnitTypes, QgsVectorDataProvider
from qgis.core import QgsLayoutExporter, QgsApplication, QgsLayoutItem, QgsLayoutItemLegend, QgsLayerTree
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .save_attributes_dialog import SaveAttributesDialog
import os.path
import os
import psycopg2
import processing
from distutils.dir_util import copy_tree
from pathlib import Path
import yaml
import pandas as pd

class SaveAttributes:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SaveAttributes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Save Attributes')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SaveAttributes', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/save_attributes/icon.png'

        self.add_action(
            icon_path,
            text=self.tr(u'EIA mapping outputs'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Save Attributes'),
                action)
            self.iface.removeToolBarIcon(action)


  #  def list_all_sites(self):
  #      conn = psycopg2.connect(
  #          host="localhost",
  #          port=5432,
  #          dbname="postgis_dt",
  #          user="postgres",
  #          password="Jr19951123"
  #      )
        # site
  #      cur = conn.cursor()
  #      cur.execute("""select * from dt.site;""")
  #      sites = cur.fetchall()
  #      list_of_sites = []
  #      for site in sites:
  #          # print (i)
            #  print (site[1])
  #          list_of_sites.append(site[1])
  #      conn.commit()
        # Clear the contents of the comboBox from previous runs
  #      self.dlg.comboBox_2.clear()
        # Populate the comboBox with names of all the loaded layers
        #  self.dlg.comboBox.addItems([layer.name() for layer in layers])
  #      self.dlg.comboBox_2.addItems(list_of_sites)

    def list_all_related_topics(self):
        self.dlg.spinBox.setEnabled(True)
        self.dlg.lineEdit_3.setEnabled(True)
        site_name = str(self.dlg.comboBox_2.currentText())
        # connect to the database
        conn = psycopg2.connect(
                host="localhost",
                port=5432,
                dbname="postgis_dt",
                user="postgres",
                password="Jr19951123"
                )
        cur = conn.cursor()
        cur.execute("""select c.site_name,b.topic_name 
        from dt.site c 
        inner join dt.site_topic a 
        on c.site_id = a.site_id 
        inner join dt.topic b 
        on a.topic_id = b.topic_id where site_name = '""" + site_name + """';""")
        topics = cur.fetchall()
        list_of_topics = []
        for topic in topics:
            # print (i)
            #  print (site[1])
            list_of_topics.append(topic[1])
        conn.commit()


        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox_3.clear()
        self.dlg.listWidget.clear()
        self.dlg.listWidget_3.clear()
        #self.dlg.comboBox_4.clear()
        # Populate the comboBox with names of all the loaded layers
        #  self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_3.addItems(list_of_topics)

        # list all pre_stored buffered zones
        # connect to the database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123"
        )

        cur = conn.cursor()

        cur.execute("""select * from dt.buffer_result where dev_site = '""" + site_name + """' order by unit, buffer_distance;""")
        buffer_result = cur.fetchall()
        buffer_layer = []

        dic = {}
        for i in buffer_result:
            dic[i] = {'ID': i[0],
                      'Site': i[2],
                      'Buffer distance': i[3],
                      'Unit': i[4],
                      'Layer name': i[5],
                      'Timestamp': str(i[7])}
            buffer_layer.append([dic[i]])

        conn.commit()

        for layer in buffer_layer:
            self.dlg.listWidget_3.addItem(str(layer[0]))

        try:
            site_name = str(self.dlg.comboBox_2.currentText())
            self.dlg.lineEdit_8.setText(site_name)
        except:
            warning_text = "Please select a development layer! "
            self.dlg.lineEdit_8.setText(warning_text)


    def list_all_related_layers(self):
        topic_name = str(self.dlg.comboBox_3.currentText())

        # connect to the database
        conn = psycopg2.connect(
                host="localhost",
                port=5432,
                dbname="postgis_dt",
                user="postgres",
                password="Jr19951123"
                )
        cur = conn.cursor()

        cur.execute("""select a.topic_name,b.layer_name 
        from dt.topic a 
        inner join dt.layer b 
        on a.topic_id = b.topic_id 
        where topic_name  = '""" + topic_name + """';""")

        layers = cur.fetchall()
        list_of_layers=[]
        for layer in layers:
            list_of_layers.append(layer[1])

        conn.commit()

        # Clear the contents of the comboBox from previous runs
        #self.dlg.comboBox_4.clear()

        # Populate the comboBox with names of all the loaded layers
        #  self.dlg.comboBox.addItems([layer.name() for layer in layers])
        #self.dlg.comboBox_4.addItems(list_of_layers)
        self.dlg.listWidget.clear()
        for i in list_of_layers:
            self.dlg.listWidget.addItem(i)


    def load_site_shp(self):

        site_name = str(self.dlg.comboBox_2.currentText())
        # get all layers
        layers = QgsProject.instance().mapLayers()
        list_of_layers = []
        for layer in layers.values():
            list_of_layers.append(layer.name())
        if site_name not in list_of_layers:
            #connect to db
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection("localhost", "5432", "postgis_dt", "postgres", "Jr19951123")
            # set database schema, table name, geometry column and optionally
            uri.setDataSource("shp_dt", site_name, "geom")
            vlayer = QgsVectorLayer(uri.uri(False), site_name, "postgres")
            QgsProject.instance().addMapLayer(vlayer)
            canvas = self.iface.mapCanvas()
            extent = vlayer.extent()
            canvas.setExtent(extent)
            text = site_name + " loaded!"
            self.dlg.textBrowser_2.append(text)
            # add site to the comboBox in Tab 3
            list_of_sites_loaded = []
            list_of_sites_loaded.append(site_name)
            # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
            self.dlg.comboBox_5.addItems(list_of_sites_loaded)
        else:
            self.dlg.textBrowser_2.append(site_name + " already exists!")
            layer_existing = QgsProject.instance().mapLayersByName(site_name)[0]
            self.iface.setActiveLayer(layer_existing)
            QgsProject.instance().layerTreeRoot().findLayer(layer_existing.id()).setItemVisibilityChecked(True)
            canvas = self.iface.mapCanvas()
            extent = layer_existing.extent()
            canvas.setExtent(extent)
            self.iface.mapCanvas().refresh()
            # add site to the comBoBox in Tab 3
            AllItems = [self.dlg.comboBox_5.itemText(i) for i in range(self.dlg.comboBox_5.count())]
            if site_name not in AllItems:
                list_of_sites_loaded = []
                list_of_sites_loaded.append(site_name)
                # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
                self.dlg.comboBox_5.addItems(list_of_sites_loaded)

    def load_env_shp(self):
        try:
            #layer_name = str(self.dlg.comboBox_4.currentText())
            layer_name = str(self.dlg.listWidget.currentItem().text())
            # get all layers
            layers = QgsProject.instance().mapLayers()
            list_of_layers = []
            for layer in layers.values():
                list_of_layers.append(layer.name())
            if layer_name not in list_of_layers:
                uri = QgsDataSourceUri()
                # set host name, port, database name, username and password
                uri.setConnection("localhost", "5432", "postgis_dt", "postgres", "Jr19951123")
                # set database schema, table name, geometry column and optionally
                # subset (WHERE clause)
                uri.setDataSource("shp_dt", layer_name, "geom")
                vlayer = QgsVectorLayer(uri.uri(False), layer_name, "postgres")
                QgsProject.instance().addMapLayer(vlayer)
                canvas = self.iface.mapCanvas()
                extent = vlayer.extent()
                canvas.setExtent(extent)
                text = layer_name + " loaded!"
                self.dlg.textBrowser_2.append(text)
                list_of_sites_loaded = []
                list_of_sites_loaded.append(layer_name)
                # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
                self.dlg.comboBox_4.addItems(list_of_sites_loaded)
            else:
                env_layer_existing = QgsProject.instance().mapLayersByName(layer_name)[0]
                self.iface.setActiveLayer(env_layer_existing)
                QgsProject.instance().layerTreeRoot().findLayer(env_layer_existing.id()).setItemVisibilityChecked(True)
                canvas = self.iface.mapCanvas()
                extent = env_layer_existing.extent()
                canvas.setExtent(extent)
                self.iface.mapCanvas().refresh()
                self.dlg.textBrowser_2.append(layer_name + " already exists!")
                AllItems = [self.dlg.comboBox_4.itemText(i) for i in range(self.dlg.comboBox_4.count())]
                if layer_name not in AllItems:
                    list_of_sites_loaded = []
                    list_of_sites_loaded.append(layer_name)
                    # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
                    self.dlg.comboBox_4.addItems(list_of_sites_loaded)

        except:
            warning_text = "Please select an environmental layer! "
            self.dlg.textBrowser_2.append(warning_text)


    def load_env_shp_search_tab(self):
        try:
            layer_name = str(self.dlg.listWidget_5.currentItem().text())
            # get all layers
            layers = QgsProject.instance().mapLayers()
            list_of_layers = []
            for layer in layers.values():
                list_of_layers.append(layer.name())
            if layer_name not in list_of_layers:
                uri = QgsDataSourceUri()
                # set host name, port, database name, username and password
                uri.setConnection("localhost", "5432", "postgis_dt", "postgres", "Jr19951123")
                # set database schema, table name, geometry column and optionally
                # subset (WHERE clause)
                uri.setDataSource("shp_dt", layer_name, "geom")
                vlayer = QgsVectorLayer(uri.uri(False), layer_name, "postgres")
                QgsProject.instance().addMapLayer(vlayer)
                canvas = self.iface.mapCanvas()
                extent = vlayer.extent()
                canvas.setExtent(extent)
                text = layer_name + " loaded!"
                self.dlg.textBrowser_6.append(text)
                list_of_sites_loaded = []
                list_of_sites_loaded.append(layer_name)
                # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
                self.dlg.comboBox_4.addItems(list_of_sites_loaded)
            else:
                env_layer_existing = QgsProject.instance().mapLayersByName(layer_name)[0]
                self.iface.setActiveLayer(env_layer_existing)
                QgsProject.instance().layerTreeRoot().findLayer(env_layer_existing.id()).setItemVisibilityChecked(True)
                canvas = self.iface.mapCanvas()
                extent = env_layer_existing.extent()
                canvas.setExtent(extent)
                self.iface.mapCanvas().refresh()
                self.dlg.textBrowser_6.append(layer_name + " already exists!")
                AllItems = [self.dlg.comboBox_4.itemText(i) for i in range(self.dlg.comboBox_4.count())]
                if layer_name not in AllItems:
                    list_of_sites_loaded = []
                    list_of_sites_loaded.append(layer_name)
                    # list_of_sites_loaded_no_du = list(dict.fromkeys(list_of_sites_loaded))
                    self.dlg.comboBox_4.addItems(list_of_sites_loaded)

        except:
            warning_text = "Please select an environmental layer! "
            self.dlg.textBrowser_6.append(warning_text)



    def display_buff_on_maps(self):
        #self.dlg.comboBox_5.clear()
        buffer_distance = self.dlg.spinBox.value()
        unit = str(self.dlg.comboBox.currentText())
        site_name = str(self.dlg.comboBox_2.currentText())
        output_path = self.dlg.lineEdit_3.text()
        outFn = str(output_path)
        try:
            layers = QgsProject.instance().mapLayersByName(site_name)
            layer = layers[0]
            fields = layer.fields()
            feats = layer.getFeatures()
            writer = QgsVectorFileWriter(outFn, 'UTF-8', fields, QgsWkbTypes.Polygon, layer.sourceCrs(), 'ESRI Shapefile')
            if unit == "metre":
                buffer_distance = buffer_distance
            if unit == "kilometres":
                buffer_distance = buffer_distance*1000
            if unit == "feet":
                buffer_distance = buffer_distance*0.3048
            if unit == "miles":
                buffer_distance = buffer_distance*1609.344
            for feat in feats:
                geom = feat.geometry()
                buff = geom.buffer(buffer_distance, 5)
                feat.setGeometry(buff)
            writer.addFeature(feat)


            #QgsProject.instance().addMapLayer(outFn)
            #QgsProject.instance().addMapLayer(layer)
            del writer

            file_name = str(Path(output_path).name.split('.')[0])

            # get all layers
            layers = QgsProject.instance().mapLayers()
            list_of_layers = []
            for layer in layers.values():
                list_of_layers.append(layer.name())
            if file_name not in list_of_layers:
                self.iface.addVectorLayer(outFn, '', 'ogr')
                new_layer = QgsProject.instance().mapLayersByName(file_name)[0]
                self.iface.setActiveLayer(new_layer)
                QgsProject.instance().layerTreeRoot().findLayer(new_layer.id()).setItemVisibilityChecked(True)
                canvas = self.iface.mapCanvas()
                extent = new_layer.extent()
                canvas.setExtent(extent)
                self.iface.mapCanvas().refresh()
                text = file_name + " loaded!"
                self.dlg.textBrowser_5.append(text)
                list_of_sites_loaded = []
                list_of_sites_loaded.append(file_name)
                self.dlg.comboBox_5.addItems(list_of_sites_loaded)
            else:
                layer_existing = QgsProject.instance().mapLayersByName(file_name)[0]
                self.iface.setActiveLayer(layer_existing)
                QgsProject.instance().layerTreeRoot().findLayer(layer_existing.id()).setItemVisibilityChecked(True)
                canvas = self.iface.mapCanvas()
                extent = layer_existing.extent()
                canvas.setExtent(extent)
                self.iface.mapCanvas().refresh()
                text_0 = file_name + " already exists!"
                self.dlg.textBrowser_5.append(text_0)
                AllItems = [self.dlg.comboBox_5.itemText(i) for i in range(self.dlg.comboBox_5.count())]
                if file_name not in AllItems:
                    list_of_sites_loaded = []
                    list_of_sites_loaded.append(file_name)
                    self.dlg.comboBox_5.addItems(list_of_sites_loaded)

            # get all layers
            #layers = QgsProject.instance().mapLayers()
            #list_of_layers = []
            #for layer in layers.values():
            #    list_of_layers.append(layer.name())
            #list_of_sites_loaded = []
            #if file_name in list_of_layers:
            #    list_of_sites_loaded.append(file_name)
            #self.dlg.comboBox_5.addItems(list_of_sites_loaded)
        except:
            text = "Please load the selected development site to the map!"
            self.dlg.textBrowser_5.append(text)
        #third_tab_dev_list = []

        #buffer_layer_loaded = []
        #if file_name not in list_of_layers:
        #    buffer_layer_loaded = []
        #    buffer_layer_loaded.append(file_name)
        #    self.dlg.comboBox_5.addItems(buffer_layer_loaded)
        #    self.dlg.lineEdit_10.setText(str(buffer_layer_loaded))

        # get list of sites
        #conn = psycopg2.connect(
        #        host="localhost",
        #        port=5432,
        #        dbname="postgis_dt",
        #        user="postgres",
        #        password="Jr19951123"
        #        )
        #cur = conn.cursor()
        #cur.execute("""select * from dt.site;""")
        #sites = cur.fetchall()
        #list_of_sites = []
        #for site in sites:
        #    list_of_sites.append(site[1])
        #conn.commit()

        # find common elements from two lists
        #dev_site = list(set(list_of_sites).intersection(list_of_layers))

        #for i in dev_site:
        #    third_tab_dev_list.append(i)
        #for j in buffer_layer_loaded:
        #    third_tab_dev_list.append(j)


        # add common elements in the comboBox
        #self.dlg.comboBox_5.addItems(buffer_layer_loaded)
        #self.dlg.lineEdit_10.setText(str(buffer_layer_loaded))

    def save_as_map(self):
        layout_name = self.dlg.lineEdit.text()
        output_path_map = self.dlg.lineEdit_12.text()

        # make a map
        site_name = str(self.dlg.comboBox_2.currentText())
        layers1 = QgsProject.instance().mapLayersByName(site_name)
        #layers1 = QgsProject.instance().mapLayersByName('UCL Main Campus')
        layer1 = layers1[0]

        layer_name = str(self.dlg.listWidget.currentItem().text())
        #layers2 = QgsProject.instance().mapLayersByName('Listed_Building')
        layers2 = QgsProject.instance().mapLayersByName(layer_name)
        layer2 = layers2[0]

        project = QgsProject.instance()
        manager = project.layoutManager()
        layoutName = layout_name
        layouts_list = manager.printLayouts()
        # remove any duplicate layouts
        for layout in layouts_list:
            if layout.name() == layoutName:
                manager.removeLayout(layout)

        # below code from layout_loader plugin
        layout.initializeDefaults()
        # Load template file and load it into the layout (l)
        template_source = os.path.join(profile_dir, 'composer_templates', template_name + '.qpt')
        template_file = open(template_source, 'r+', encoding='utf-8')
        template_content = template_file.read()
        template_file.close()
        document = QDomDocument()
        document.setContent(template_content)
        context = QgsReadWriteContext()
        layout.loadFromTemplate(document, context)

        layout = QgsPrintLayout(project)
        layout.setName(layoutName)
        manager.addLayout(layout)

        # create map item in the layout
        map = QgsLayoutItemMap(layout)
        map.setRect(20, 20, 20, 20)

        # set the map extent
        ms = QgsMapSettings()
        ms.setLayers([layer1])
        ms.setLayers([layer2])
        # rect = QgsRectangle(ms.fullExtent())
        # rect.scale(1.0)
        rect = QgsRectangle(layer1.extent())
        ms.setExtent(rect)
        map.setExtent(rect)
        map.setBackgroundColor(QColor(255, 255, 255, 0))
        layout.addLayoutItem(map)

        map.attemptMove(QgsLayoutPoint(5, 20, QgsUnitTypes.LayoutMillimeters))
        map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

        # export as pdf
        # layout = manager.layoutByName(layoutName)
        # exporter = QgsLayoutExporter(layout)
        # exporter.exportToPdf(output_path_map,
        #                     QgsLayoutExporter.PdfExportSettings())
    def insert_buffer_into_db(self):
        # add a field and value
        try:
            output_path = self.dlg.lineEdit_3.text()
            buffer_layer_name = str(Path(output_path).name.split('.')[0])
            layer = QgsProject.instance().mapLayersByName(buffer_layer_name)[0]
            caps = layer.dataProvider().capabilities()

            if caps & QgsVectorDataProvider.AddAttributes:
                res = layer.dataProvider().addAttributes(
                    [QgsField("Dev_Site", QVariant.String),
                     QgsField("Buffer", QVariant.Double),
                     QgsField("Unit", QVariant.String)])

            layer.updateFields()
            prov = layer.dataProvider()
            # lookup index of fields using their names
            dev_site_idx = layer.fields().lookupField('Dev_Site')
            buff_idx = layer.fields().lookupField('Buffer')
            unit_idx = layer.fields().lookupField('Unit')
            # create dictionaries with field index as key and the attribute you want as value

            dev_site_name = str(self.dlg.lineEdit_8.text())
            buffer_distance = self.dlg.spinBox.value()
            unit = str(self.dlg.comboBox.currentText())


            atts_list = [{dev_site_idx: dev_site_name}, {buff_idx: buffer_distance}, {unit_idx: unit}]

            # store reference to feature you want to update
            feat = layer.getFeature(1)
            # iterate through list of attribute dictionaries
            for atts in atts_list:
                # call changeAttributeValues(), pass feature id and attribute dictionary
                prov.changeAttributeValues({feat.id(): atts})

            for feat in layer.getFeatures():
                geom = feat.geometry()
                geom_string = geom.asWkt()

            # insert into database

            conn = psycopg2.connect(
                host="localhost",
                port=5432,
                dbname="postgis_dt",
                user="postgres",
                password="Jr19951123")
            cur = conn.cursor()

            cur.execute("""insert into 
                        dt.buffer_result(location, site_id, dev_site, 
                        buffer_distance, unit,buffer_name) 
                        values (ST_GeomFromText('""" + geom_string + """',27700), 
                        (select site_id from dt.site where site_name='"""
                        + dev_site_name +
                        """'),
                        '""" +
                        dev_site_name
                        + """', '""" +
                        str(buffer_distance)
                        + """', '""" +
                        unit + """', '""" +
                        buffer_layer_name + """');""")
            conn.commit()

            text = str(buffer_distance) + " " + unit + " buffer area for " + dev_site_name + " inserted!"
            text_refresh = " Please click refresh to reload the buffer."
            self.dlg.textBrowser_5.append(text + text_refresh)
        except:
            text_warning = "Load a buffer zone first or buffer zone already existing in the database! "
            self.dlg.textBrowser_5.append(text_warning)

    def delete_buffer_from_db(self):
        buffer_information_str = str(self.dlg.listWidget_3.currentItem().text())
        buffer_information_dic = yaml.load(buffer_information_str)
        buffer_id = buffer_information_dic["ID"]
        buffer_name = buffer_information_dic["Layer name"]
        # delete from database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123")
        cur = conn.cursor()

        cur.execute("""delete from dt.buffer_result where buffer_result_id = """ + str(buffer_id) + """;""")
        conn.commit()
        text = buffer_name + " Deleted! Please click refresh to reload the buffer."
        self.dlg.textBrowser_5.append(text)


    def load_pre_existing_buffer(self):
        buffer_information_str = str(self.dlg.listWidget_3.currentItem().text())
        buffer_information_dic = yaml.load(buffer_information_str)
        buffer_id = buffer_information_dic["ID"]
        buffer_name = buffer_information_dic["Layer name"]

        # get all layers
        layers = QgsProject.instance().mapLayers()
        list_of_layers = []
        for layer in layers.values():
            list_of_layers.append(layer.name())
        if buffer_name not in list_of_layers:
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection("localhost", "5432", "postgis_dt", "postgres", "Jr19951123")
            # set database schema, table name, geometry column and optionally
            # subset (WHERE clause)
            uri.setDataSource("dt", "buffer_result", "location","buffer_result_id = " + str(buffer_id))
            vlayer = QgsVectorLayer(uri.uri(False), buffer_name, "postgres")
            QgsProject.instance().addMapLayer(vlayer)
            canvas = self.iface.mapCanvas()
            extent = vlayer.extent()
            canvas.setExtent(extent)
            self.iface.mapCanvas().refresh()
            text1 = buffer_name + " loaded! "
            self.dlg.textBrowser_5.append(text1)
            list_of_sites_loaded = []
            list_of_sites_loaded.append(buffer_name)
            self.dlg.comboBox_5.addItems(list_of_sites_loaded)
        else:
            layer_existing = QgsProject.instance().mapLayersByName(buffer_name)[0]
            self.iface.setActiveLayer(layer_existing)
            QgsProject.instance().layerTreeRoot().findLayer(layer_existing.id()).setItemVisibilityChecked(True)
            canvas = self.iface.mapCanvas()
            extent = layer_existing.extent()
            canvas.setExtent(extent)
            self.iface.mapCanvas().refresh()
            text2 = buffer_name + " already exists! "
            self.dlg.textBrowser_5.append(text2)
            AllItems = [self.dlg.comboBox_5.itemText(i) for i in range(self.dlg.comboBox_5.count())]
            if buffer_name not in AllItems:
                list_of_sites_loaded = []
                list_of_sites_loaded.append(buffer_name)
                self.dlg.comboBox_5.addItems(list_of_sites_loaded)


    def refresh_buffer_layers(self):
        #-------------------------------
        # list all pre_stored buffered zones
        self.dlg.listWidget_3.clear()
        site_name = str(self.dlg.comboBox_2.currentText())
        # list all pre_stored buffered zones
        # connect to the database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123"
        )

        cur = conn.cursor()

        cur.execute(
            """select * from dt.buffer_result where dev_site = '""" + site_name + """' order by unit, buffer_distance;""")
        buffer_result = cur.fetchall()
        buffer_layer = []

        dic = {}
        for i in buffer_result:
            dic[i] = {'ID': i[0],
                      'Site': i[2],
                      'Buffer distance': i[3],
                      'Unit': i[4],
                      'Layer name': i[5],
                     'Timestamp': str(i[7])}
            buffer_layer.append([dic[i]])

        conn.commit()


        for layer in buffer_layer:
            self.dlg.listWidget_3.addItem(str(layer[0]))

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.shp')
        self.dlg.lineEdit_3.setText(filename)
        #self.dlg.textBrowser_5.clear()

    def select_output_file_map_image(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.jpg')
        self.dlg.lineEdit_12.setText(filename)

    def select_output_file_map_pdf(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.pdf')
        self.dlg.lineEdit_12.setText(filename)

    def select_output_file_analysis(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.shp'
                                                  '')
        self.dlg.lineEdit_10.setText(filename)

    def select_output_file_analysis_csv(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.csv'
                                                  '')
        self.dlg.lineEdit_13.setText(filename)

    def spatial_analysis(self):

        #load_message = "Loading ... "
        #self.dlg.lineEdit_4.setText(load_message)
        env_layer_name = str(self.dlg.comboBox_4.currentText())
        dev_layer_name = str(self.dlg.comboBox_5.currentText())
        env_layer = QgsProject.instance().mapLayersByName(env_layer_name)[0]
        dev_layer = QgsProject.instance().mapLayersByName(dev_layer_name)[0]
        output_path = self.dlg.lineEdit_10.text()

        if env_layer.geometryType() == 0:
            method = "Point in Polygon"
            parameter = {
                'POLYGONS': dev_layer,
                'POINTS': env_layer,
                'WEIGHT': None,
                'CLASSFIELD': None,
                'FIELD': 'NUMPOINTS',
                'OUTPUT': output_path}
            processing.run("qgis:countpointsinpolygon", parameter)
            count_layer = QgsVectorLayer(output_path, str(Path(output_path).name.split('.')[0]), "ogr")
            QgsProject.instance().addMapLayer(count_layer)
            for f in count_layer.getFeatures():
                num = f["NUMPOINTS"]
            numerical_result = str(int(num))
            message = "The number of "+env_layer_name+" in "+dev_layer_name+" is "+numerical_result+"."


        if env_layer.geometryType() == 1:
            method = "Line in Polygon"
            parameter = {
                'LINES': env_layer,
                'POLYGONS': dev_layer,
                'METHOD': 1,
                'INTERSECT': output_path}
            processing.run("saga:linepolygonintersection", parameter)
            count_layer = QgsVectorLayer(output_path, str(Path(output_path).name.split('.')[0]), "ogr")
            QgsProject.instance().addMapLayer(count_layer)
            lengthtot = 0
            for elem in count_layer.getFeatures():
                geom = elem.geometry()
                lengthtot += geom.length()
            numerical_result = str(float(lengthtot))
            message = "The length of "+env_layer_name+" inside "+dev_layer_name+" is "+numerical_result+"."

        if env_layer.geometryType() == 2:
            method = "Polygon in Polygon"
            parameter = {
                'A': env_layer,
                'B': dev_layer,
                'SPLIT': True,
                'RESULT': output_path}
            processing.run("saga:intersect", parameter)
            count_layer = QgsVectorLayer(output_path, str(Path(output_path).name.split('.')[0]), "ogr")
            QgsProject.instance().addMapLayer(count_layer)
            areatot = 0
            for elem in count_layer.getFeatures():
                geom = elem.geometry()
                areatot += geom.area()
            area_2d = "%.2f" % areatot
            numerical_result = str(float(area_2d))
            message = "The area of " + env_layer_name + " inside " + dev_layer_name + " is "+numerical_result+"."

        # Append the result content in the lineEditor
        self.dlg.lineEdit_4.setText(message)
        #self.dlg.textBrowser.append(message)
        # Append the result content in the text browser
        text = {'Dev Site': dev_layer_name,
                'Env site': env_layer_name,
                'Method': method,
                'Result': numerical_result}
        self.dlg.textBrowser_3.append(str(text))

        # Finally, Insert the result into the database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123")

        cur1 = conn.cursor()
        cur1.execute("""select * from dt.site;""")
        sites = cur1.fetchall()
        list_of_sites = []
        for site in sites:
            list_of_sites.append(site[1])
        conn.commit()

        cur2 = conn.cursor()
        if dev_layer_name in list_of_sites:
            cur2.execute("""insert into 
        			dt.analysis_result(site_id, dev_site, env_site, method, analysis_result) 
        			values ((select site_id from dt.site where site_name = '""" + dev_layer_name + """'),'""" + dev_layer_name + """', '""" + env_layer_name
                        + """', '""" + method + """', """ + numerical_result + """);""")
        else:
            cur2.execute("""insert into 
        			dt.analysis_result(buffer_result_id, dev_site, env_site, method, analysis_result) 
        			values ((select buffer_result_id from dt.buffer_result where buffer_name = '""" + dev_layer_name + """'),'""" + dev_layer_name + """', '""" + env_layer_name
                        + """', '""" + method + """', """ + numerical_result + """);""")
        conn.commit()

        self.dlg.lineEdit_10.clear()

    #    def add_templates(self):

#        # Paths to source files and qgis profile directory
#        source_profile = os.path.join(self.plugin_dir, 'profile')
#        profile_home = QgsApplication.qgisSettingsDirPath()

#        copy_tree(source_profile, profile_home)
#        self.load_templates()

#    def load_templates(self):
#        self.dlg.listWidget_2.clear()
#        profile_dir = QgsApplication.qgisSettingsDirPath()
#        templates_dir = os.path.join(profile_dir, 'composer_templates')

        # Does the composer_templates folder exist? Otherwise create it.
#        if os.path.isdir(templates_dir) == False:
#            os.mkdir(templates_dir)

        # Search the templates folder and add files to templates list and sort it
#        templates = [f.name for f in os.scandir(templates_dir) if f.is_file()]
#        templates.sort()

        # Get the project file name and if it exist the project title. Use for Title suggestion
#        project_file_name = QFileInfo(QgsProject.instance().fileName()).baseName()
#        project_title = QgsProject.instance().title()
#        if project_title == '':
#            project_title = project_file_name
#        self.dlg.lineEdit_2.setText(project_title)

        # Add all the templates from the list to the listWidget_2 (only add files with *.qpt extension)
#        for template in templates:
#            filename, extension = os.path.splitext(template)
#            if extension == '.qpt':
#                self.dlg.listWidget_2.addItem(filename)


    def analysis_result_check(self):
        self.dlg.lineEdit_10.setEnabled(True)
        env_layer_name = str(self.dlg.comboBox_4.currentText())
        dev_layer_name = str(self.dlg.comboBox_5.currentText())
        #dev_layer_name = "UCL Main Campus"
        #env_layer_name = "Listed_Building2"
        # Finally, Insert the result into the database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123")

        cur = conn.cursor()

        cur.execute("""select dev_site, env_site, method, analysis_result from 
        			dt.analysis_result 
        			where dev_site = '""" + dev_layer_name + """' and 
        			env_site = '""" + env_layer_name + """';""")

        analysis_result = cur.fetchall()

        if len(analysis_result) == 0:
            text = "Not found!"
            self.dlg.lineEdit_9.setText(text)
        else:
            for result in analysis_result:
                self.dlg.lineEdit_9.setText(str(result))
                self.dlg.lineEdit_10.setEnabled(False)
                self.dlg.textBrowser_3.append(str({'Dev Site': result[0], 'Env site': result[1], 'Method': result[2],
                                                   'Result': str(result[3])}))
        conn.commit()



    # Python function that do the main work of setting up the print layout
    # The code in the function can work stand alone if you use the commented variables and edit their values
    def layoutLoader(self, template_source, layout_name, title_text):
        """ Generate the layout """
        from qgis.core import (QgsProject,
                               QgsPrintLayout,
                               QgsReadWriteContext)
        from qgis.utils import iface
        from PyQt5.QtXml import QDomDocument

        # template_source = '/home/user/Document/Template.qpt'
        # layout_name = 'NewLayout'
        # title_text = 'New Title'
        layout_name = self.dlg.lineEdit.text()
        #title_text = self.dlg.lineEdit_2.text()

        # Create objects lm = layout manager, l = print layout
        lm = QgsProject.instance().layoutManager()
        l = QgsPrintLayout(QgsProject.instance())
        l.initializeDefaults()

        # Load template file and load it into the layout (l)
        template_file = open(template_source, 'r+', encoding='utf-8')
        template_content = template_file.read()
        template_file.close()
        document = QDomDocument()
        document.setContent(template_content)
        context = QgsReadWriteContext()
        l.loadFromTemplate(document, context)

        # Give the layout a name (must be unique)
        l.setName(layout_name)

        canvas = iface.mapCanvas()

        # try:::::
        #ms = QgsMapSettings()
        #layers = iface.mapCanvas().layers()
        #for layer in layers:
        #    ms.setLayers(layer)
        #rect = QgsRectangle(ms.fullExtent())
        #rect.scale(1.0)
        #rect = QgsRectangle(canvas.extent())
        #ms.setExtent(rect)


        # Get current canvas extent and apply that to all maps (items) in layout
        # Replace any text "{{title}}" in any layout label with the dialog Title text

        for item in l.items():
            if item.type() == 65639:  # Map
                item.zoomToExtent(canvas.extent())
            #if item.type() == 65641:  # Label
            #    item.setText(item.text().replace('{{PROJECT TITLE}}', title_text))

        try:
            project_title_text = self.dlg.lineEdit_2.text()
            drawing_title_text = self.dlg.lineEdit_6.text()
            num = self.dlg.lineEdit_5.text()
            author = self.dlg.lineEdit_7.text()
        except:
            project_title_text = "Please input the project title"
            drawing_title_text = "Please input the drawing title"
            num = "Please input the figure number"
            author = "Please input your name"

        try:
            project_title = l.itemById("PROGECT TITLE: TEXT")
            drawing_title = l.itemById("DRAWING TITLE: TEXT")
            figure_num = l.itemById("FIGURE:TEXT")
            author_name = l.itemById("Drawn By ")

            project_title.setText(project_title_text)
            drawing_title.setText(drawing_title_text)
            figure_num.setText("Figure " + str(num))
            author_name.setText("Drawn By: " + author)
        except:
            pass


        legend = QgsLayoutItemLegend(l)

        legend.setTitle("")
        legend.setBackgroundColor(QColor(255, 255, 255, 1))
        legend.setLegendFilterByMapEnabled(True)
        legend.refresh()
        #layerTree = QgsLayerTree()
        #layers = iface.mapCanvas().layers()
        #for layer in layers:
        #    layerTree.addLayer(layer)
        #legend.model().setRootGroup(layerTree)

        ##############################################
        # below codes are copied from https://gis.stackexchange.com/questions/310483/pyqgis-print-layout-legend-setlegendfilterbymapenabled

        #checked_lyrs = [l.name() for l in QgsProject().instance().layerTreeRoot().children() if l.isVisible()]
        # get map layer objects of checked layers by matching their names and store those in a list
        #lyrsToAdd = [l for l in QgsProject().instance().mapLayers().values() if l.name() in checked_lyrs]
        #root = QgsLayerTree()
        #for lyr in lyrsToAdd:
            # add layer objects to the layer tree
        #    root.addLayer(lyr)
        #legend.model().setRootGroup(root)


        l.addLayoutItem(legend)
        legend.attemptMove(QgsLayoutPoint(355, 15, QgsUnitTypes.LayoutMillimeters))

        # Add layout to layout manager
        l.refresh()
        lm.addLayout(l)

        # Open and show the layout in designer
        try:
            iface.openLayoutDesigner(l)
        except:
            oopsBox = QMessageBox()
            oopsBox.setIcon(QMessageBox.Warning)
            oopsBox.setText(self.tr(
                'Ooops. Something went wrong. Trying to open the generated layout ({}) returned errors.'.format(
                    l.name())))
            oopsBox.setWindowTitle(self.tr('Layout Loader'))
            oopsBox.exec_()

    def save_map_image(self):
        lm = QgsProject.instance().layoutManager()
        layout_name = self.dlg.lineEdit.text()
        output_path_map = self.dlg.lineEdit_12.text()
        layout = lm.layoutByName(layout_name)
        exporter = QgsLayoutExporter(layout)
        exporter.exportToImage(output_path_map, QgsLayoutExporter.ImageExportSettings())
        text = layout_name + " saved!"
        self.dlg.textBrowser_4.append(text)

    def save_map_pdf(self):
        lm = QgsProject.instance().layoutManager()
        layout_name = self.dlg.lineEdit.text()
        output_path_map = self.dlg.lineEdit_12.text()
        layout = lm.layoutByName(layout_name)
        exporter = QgsLayoutExporter(layout)
        exporter.exportToPdf(output_path_map,QgsLayoutExporter.PdfExportSettings())
        text = layout_name + " saved!"
        self.dlg.textBrowser_4.append(text)

    # Does a layout already exist
    def layout_exists(self, layout_name):
    	  lm = QgsProject.instance().layoutManager()
    	  layouts = []
    	  for l in lm.layouts():
    	  	  layouts.append(l.name())
    	  if layout_name in layouts:
    	     return sum(layout_name in s for s in layouts)
    	  else:
    	     return 0


    def print_layout(self):
        try:
            template_name = self.dlg.listWidget_2.currentItem().text()
        except:
            template_name = ''
        layout_name = self.dlg.lineEdit.text()
        # Generate random layout name for blank names (REDUNDANT?)
        if layout_name == '':
            layout_name = 'Layout'

        # Add function to test the layout name so that it doesn't exist. If it does handle the exception

        map_title = self.dlg.lineEdit_2.text()
        profile_dir = QgsApplication.qgisSettingsDirPath()
        # create the template item selected full path (assuming extension is lower case)
        template_source = os.path.join(profile_dir, 'composer_templates', template_name + '.qpt')

        # Call function to generate layout, renaming duplicate layout names
        layout_count = self.layout_exists(layout_name)  # How many layouts with the same name exist already
        if layout_count >> 0:
            name = layout_name.split('_')
            if layout_count >> 1:
                layout_name = '_'.join(name) + '_' + str(layout_count + 1)
            else:
                layout_name += '_2'
        try:
            if os.path.exists(template_source):
                self.layoutLoader(template_source, layout_name, map_title)  # CALLING MAIN LAYOUT LOADING PROCESS
            else:
                infoBox = QMessageBox()
                infoBox.setIcon(QMessageBox.Information)
                infoBox.setText(self.tr('You must select a valid template from the list.'))
                infoBox.setWindowTitle(self.tr('Layout Loader'))
                infoBox.exec_()
        except:
            oopsBox = QMessageBox()
            oopsBox.setIcon(QMessageBox.Warning)
            oopsBox.setText(
                self.tr('Ooops. Something went wrong opening ({}). But I don\'t know what?'.format(layout_name)))
            oopsBox.setWindowTitle(self.tr('Layout Loader'))
            oopsBox.setDetailedText(
                'Map Title: {}\nTemplate Name: {}\nLayout Name: {}\nProfile Directory: {}\nTemplate Source: {}\nLayout Count: {}' % (
                map_title, template_name, layout_name, profile_dir, template_source, layout_count))
            oopsBox.exec_()

        # Clean up
        # self.dlg.lineEdit.clear()
        # self.dlg.lineEdit.setEnabled(False)
        self.dlg.lineEdit_2.clear()
        self.dlg.lineEdit_5.clear()
        self.dlg.lineEdit_6.clear()
        #self.dlg.lineEdit_2.setFocus()


    def save_result(self):
        import csv
        from ast import literal_eval
        result_text = self.dlg.textBrowser_3.toPlainText()
        output_path = self.dlg.lineEdit_13.text()

        with open(output_path, mode='w') as csv_file:
            fieldnames = ['Dev Site', 'Env site', 'Method', 'Result']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()
            for line in result_text.splitlines():
                if len(line) > 3:
                    line_dic = literal_eval(line)
                    writer.writerow(line_dic)
        self.dlg.textBrowser.append("Saved as a CSV file !")


    def tab_4_load_selected_layers(self):
        self.dlg.listWidget_4.clear()
        layers_selected = self.iface.mapCanvas().layers()

        list_of_layers_selected = []
        for layer in layers_selected:
            list_of_layers_selected.append(layer.name())
        for i in list_of_layers_selected:
            self.dlg.listWidget_4.addItem(i)

    def tab_4_delete_unselected_layers(self):
        layers_selected = self.iface.mapCanvas().layers()
        list_of_layers_selected = []
        for layer in layers_selected:
            list_of_layers_selected.append(layer.name())

        layers_all = QgsProject.instance().mapLayers()
        list_of_layers = []
        for layer in layers_all.values():
            list_of_layers.append(layer.name())

        print(list_of_layers)

        # get all un-selected layers and remove all un-selected layers

        for i in list_of_layers:
            if i not in list_of_layers_selected:
                QgsProject.instance().removeMapLayer(QgsProject.instance().mapLayersByName(i)[0])

        #layer_name = str(self.dlg.listWidget_4.currentItem().text())
        #layer_to_remove = QgsProject.instance().mapLayersByName(layer_name)[0]
        #QgsProject.instance().removeMapLayer(layer_to_remove)
        #self.dlg.listWidget_4.clear()
        #layers = QgsProject.instance().mapLayers()
        #list_of_layers = []
        #for layer in layers.values():
        #    list_of_layers.append(layer.name())
        #for i in list_of_layers:
        #    self.dlg.listWidget_4.addItem(i)

    def search_for_layers(self):
        self.dlg.listWidget_5.clear()

        keyword = self.dlg.lineEdit_11.text()
        #keyword = "flood"
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123")

        cur = conn.cursor()

        cur.execute("""select layer_name from dt.layer where layer_name ~* '""" + keyword + """' order by layer_name;""")

        layers = cur.fetchall()

        list_of_all_layers = []

        for layer in layers:
            list_of_all_layers.append(layer[0])

        conn.commit()

        for i in list_of_all_layers:
            self.dlg.listWidget_5.addItem(i)



    def run(self):
        """Run method that performs all the real work"""
        # connect to the database

        conn = psycopg2.connect(
                host="localhost",
                port=5432,
                dbname="postgis_dt",
                user="postgres",
                password="Jr19951123"
                )
        # ## 2. Execute query

        # ### 2.1 List all topics

        # site
        cur = conn.cursor()
        cur.execute("""select * from dt.site;""")
        sites = cur.fetchall()
        list_of_sites = []
        for site in sites:
            # print (i)
            #  print (site[1])
            list_of_sites.append(site[1])
        conn.commit()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            #self.dlg = connect_to_database()
            self.dlg = SaveAttributesDialog()
          #  self.dlg.pushButton_2.clicked.connect(self.list_all_sites)
            self.dlg.pushButton_4.clicked.connect(self.list_all_related_topics)
            self.dlg.pushButton_3.clicked.connect(self.list_all_related_layers)
            self.dlg.pushButton_8.clicked.connect(self.load_site_shp)
            self.dlg.pushButton_2.clicked.connect(self.load_env_shp)
            self.dlg.pushButton_9.clicked.connect(self.display_buff_on_maps)
            self.dlg.pushButton_11.clicked.connect(self.load_pre_existing_buffer)
            self.dlg.pushButton_10.clicked.connect(self.insert_buffer_into_db)
            self.dlg.pushButton_18.clicked.connect(self.delete_buffer_from_db)
            self.dlg.pushButton_12.clicked.connect(self.refresh_buffer_layers)
           # self.dlg.pushButton.clicked.connect(self.select_output_file)
            self.dlg.pushButton_6.clicked.connect(self.select_output_file)
            self.dlg.pushButton_14.clicked.connect(self.select_output_file_map_pdf)
            # self.dlg.pushButton_7.clicked.connect(self.save_as_map)
            self.dlg.pushButton_13.clicked.connect(self.select_output_file_analysis)
            #self.dlg.pushButton_15.clicked.connect(self.add_templates)
            self.dlg.pushButton_7.clicked.connect(self.print_layout)
            self.dlg.pushButton_16.clicked.connect(self.save_map_pdf)
            self.dlg.pushButton_5.clicked.connect(self.save_result)
            self.dlg.pushButton.clicked.connect(self.select_output_file_analysis_csv)
            self.dlg.pushButton_17.clicked.connect(self.spatial_analysis)
            self.dlg.pushButton_15.clicked.connect(self.analysis_result_check)
            self.dlg.pushButton_19.clicked.connect(self.tab_4_load_selected_layers)
            self.dlg.pushButton_20.clicked.connect(self.tab_4_delete_unselected_layers)
            self.dlg.pushButton_21.clicked.connect(self.search_for_layers)
            self.dlg.pushButton_22.clicked.connect(self.load_env_shp_search_tab)

        self.dlg.setWindowTitle('Automation Tool for EIA mapping output')
        self.dlg.setGeometry(500, 250, 1000, 500)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        map_layers = QgsProject.instance().mapLayers()
        list_of_layers = []
        for layer in map_layers.values():
            list_of_layers.append(layer.name())
		# Clear the contents of the comboBox from previous runs
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_4.clear()
        self.dlg.comboBox_5.clear()
		# Populate the comboBox with names of all the loaded layers
		# Populate the comboBox with names of all the loaded layers
        #  self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_2.addItems(list_of_sites)
        #self.dlg.comboBox_4.addItems(list_of_layers)
        #self.dlg.comboBox_5.addItems(list_of_layers)



        list_of_units = ['metres', 'kilometres','feet','miles']
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        # Populate the comboBox with names of all the loaded layers
        #  self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox.addItems(list_of_units)

        #-------------------------------
        # list all pre_stored env layers
        self.dlg.listWidget_5.clear()
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123")

        cur = conn.cursor()

        cur.execute("""select layer_name from dt.layer order by layer_name;""")

        layers = cur.fetchall()

        list_of_all_layers = []

        for layer in layers:
            list_of_all_layers.append(layer[0])

        conn.commit()

        for i in list_of_all_layers:
            self.dlg.listWidget_5.addItem(i)

        #-------------------------------
        # list all pre_stored buffered zones
        self.dlg.listWidget_3.clear()
        # connect to the database
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="postgis_dt",
            user="postgres",
            password="Jr19951123"
        )

        cur = conn.cursor()

        cur.execute("""select * from dt.buffer_result order by dev_site, unit, buffer_distance, auto_date;""")
        buffer_result = cur.fetchall()
        buffer_layer = []

        dic = {}
        for i in buffer_result:

            dic[i] = {'ID': i[0],
                      'Site': i[2],
                      'Buffer distance': i[3],
                      'Unit': i[4],
                      'Layer name': i[5],
                      'Timestamp': str(i[7])}
            buffer_layer.append([dic[i]])

        conn.commit()

        for layer in buffer_layer:
            self.dlg.listWidget_3.addItem(str(layer[0]))



        # -------------------------------------------------------------
        # add and load templates
        # Paths to source files and qgis profile directory
        source_profile = os.path.join(self.plugin_dir, 'profile')
        profile_home = QgsApplication.qgisSettingsDirPath()
        copy_tree(source_profile, profile_home)
        self.dlg.listWidget_2.clear()
        profile_dir = QgsApplication.qgisSettingsDirPath()
        templates_dir = os.path.join(profile_dir, 'composer_templates')
        # Does the composer_templates folder exist? Otherwise create it.
        if os.path.isdir(templates_dir) == False:
            os.mkdir(templates_dir)
        # Search the templates folder and add files to templates list and sort it
        templates = [f.name for f in os.scandir(templates_dir) if f.is_file()]
        templates.sort()
        # Get the project file name and if it exist the project title. Use for Title suggestion
        project_file_name = QFileInfo(QgsProject.instance().fileName()).baseName()
        project_title = QgsProject.instance().title()
        if project_title == '':
            project_title = project_file_name
        self.dlg.lineEdit_2.setText(project_title)
        # Add all the templates from the list to the listWidget_2 (only add files with *.qpt extension)
        for template in templates:
            filename, extension = os.path.splitext(template)
            if extension == '.qpt':
                self.dlg.listWidget_2.addItem(filename)
        #---------------------------------------------------------------------

        site_name_default = "Please select a development site from Load Data by Topic Tab."
        self.dlg.lineEdit_8.setText(site_name_default)
        self.dlg.spinBox.setEnabled(False)
        self.dlg.lineEdit_3.setEnabled(False)


        # show the dialog
        self.dlg.show()


        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            filename = self.dlg.lineEdit_10.text()
            with open(filename, 'w') as output_file:
                selectedLayerIndex = self.dlg.comboBox.currentIndex()
                selectedLayer = layers[selectedLayerIndex].layer()
                fieldnames = [field.name() for field in selectedLayer.fields()]
                # write header
                line = ','.join(name for name in fieldnames) + '\n'
                output_file.write(line)
                # wirte feature attributes
                for f in selectedLayer.getFeatures():
                    line = ','.join(str(f[name]) for name in fieldnames) + '\n'
                    output_file.write(line)
            self.iface.messageBar().pushMessage(
                "Success", "Output file written at " + filename,
                level=Qgis.Success, duration=3)